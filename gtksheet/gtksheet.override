%%
headers
/*
 * Python bindings for the GtkSheet widget set
 *
 * Copyright (C) 2009 Victor M. Hernandez-Rocamora
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
#include <Python.h>
#include <pygobject.h>
#include <pygtk/pygtk.h>
#include <gtksheet/gtksheet.h>
#include <gtksheet/gtksheettypebuiltins.h>
%%
include
  gtksheetrange.override
%%
modulename gtksheet
%%
import gtk.Widget as PyGtkWidget_Type
import gtk.Container as PyGtkContainer_Type
import gtk.Entry as PyGtkEntry_Type
import gtk.Adjustment as PyGtkAdjustment_Type
import pango.FontDescription as PyPangoFontDescription_Type
%%
ignore
  gtk_check_item_new_with_label
  gtk_check_item_construct_with_label
%%
override gtk_item_entry_new kwargs
static int
_wrap_gtk_item_entry_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist1[] = { NULL };
    static char *kwlist2[] = { "max", NULL };
    int max;

    if (PyArg_ParseTupleAndKeywords(args, kwargs, ":GtkItemEntry.__init__", kwlist1))
    {
        if (pygobject_construct(self, NULL))
            return -1;
    }
    else if (PyErr_Clear(),
	     PyArg_ParseTupleAndKeywords(args, kwargs, "i:GtkItemEntry.__init__", kwlist2, &max)) 
    {
        if (pygobject_construct(self, NULL))
            return -1;
        gtk_entry_set_max_length(GTK_ENTRY(self->obj), max);        
    }
    else
        return -1;
    
    if (!self->obj) {
        PyErr_SetString(PyExc_RuntimeError, "could not create GtkItemEntry object");
        return -1;
    }
    return 0;
}
%%
new-constructor GTK_TYPE_ITEM_ENTRY
%%
ignore
  gtk_item_entry_new_with_max_length
%%
override gtk_sheet_new kwargs
static int
_wrap_gtk_sheet_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist1[] = { "rows", "columns", "title", "browser", NULL };
    static char *kwlist2[] = { "rows", "columns", "title", "entry_type", NULL };

    int rows=10, columns=10;
    int browser = 0;
    char *title = "";
    GType entry_type;
    PyObject *py_entry_type = NULL;

    if (PyArg_ParseTupleAndKeywords(args, kwargs, "|iisi:GtkSheet.__init__", kwlist1,
		        &rows, &columns, &title, &browser)) 
    {
        if (pygobject_construct(self, NULL))
            return -1;        
        if (browser)
            /*self->obj = (GObject *)gtk_sheet_new_browser(rows, columns, title);*/
            gtk_sheet_construct_browser(GTK_SHEET(self->obj), rows, columns, title);
        else
            /*self->obj = (GObject *)gtk_sheet_new(rows, columns, title);*/
            gtk_sheet_construct(GTK_SHEET(self->obj), rows, columns, title);
    }
    else if (PyErr_Clear(),
     PyArg_ParseTupleAndKeywords(args, kwargs, "|iisO:GtkSheet.__init__", kwlist2,
			     &rows, &columns, &title, &py_entry_type)) 
    {
        if (((entry_type = pyg_type_from_object(py_entry_type)) == 0))
            return -1;
        if (pygobject_construct(self, NULL))
            return -1; 
        gtk_sheet_construct_with_custom_entry(GTK_SHEET(self->obj), 
                                              rows, columns, title, entry_type);
    }
    else
        return -1;

    if (!self->obj) {
        PyErr_SetString(PyExc_RuntimeError, "could not create GtkSheet object");
        return -1;
    }

    return 0;
}
%%
new-constructor GTK_TYPE_SHEET
%%
override gtk_sheet_get_visible_range
static PyObject *
_wrap_gtk_sheet_get_visible_range(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "range", NULL };
    PyObject *py_range;
    GtkSheetRange range = {0,0,0,0};
    
    gtk_sheet_get_visible_range(GTK_SHEET(self->obj), &range);

    py_range = pyg_boxed_new(GTK_TYPE_SHEET_RANGE, &range, TRUE, TRUE);
    
    return py_range;
}
%%
override gtk_sheet_get_active_cell
static PyObject *
_wrap_gtk_sheet_get_active_cell (PyGObject *self, PyObject *args, PyObject *kwargs)
{
    gint row, column;
    gtk_sheet_get_active_cell (GTK_SHEET(self->obj), &row, &column);
    return Py_BuildValue ("(ii)", row, column);
}
%%
override gtk_sheet_get_pixel_info kwargs
static PyObject *
_wrap_gtk_sheet_get_pixel_info (PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static gchar *kwlist[] = { "x", "y", NULL };
    gint x, y, row, column, ret;
    
    if (!PyArg_ParseTupleAndKeywords (args, kwargs, "ii:GtkSheet.get_pixel_info", kwlist, &x, &y))
        return NULL;
    ret = gtk_sheet_get_pixel_info(GTK_SHEET(self->obj), x, y, &row, &column);
    if (ret) 
        return Py_BuildValue("(ii)", row, column);
    Py_INCREF (Py_None);
    return Py_None;
}
%%
override gtk_sheet_put kwargs
static PyObject *
_wrap_gtk_sheet_put (PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "widget", "x", "y", NULL };
    gint x, y;
    PyGObject *widget;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O!ii:GtkSheet.put", kwlist, &PyGtkWidget_Type, &widget, &x, &y))
        return NULL;

    /* no need to return child here, other sheet methods dont't do that either! */
    (void) gtk_sheet_put (GTK_SHEET(self->obj), GTK_WIDGET(widget->obj), x, y);
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override gtk_sheet_get_cell_area kwargs
static PyObject *
_wrap_gtk_sheet_get_cell_area (PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "row", "column", NULL };
    gint row, column;
    gboolean ret;
    GdkRectangle rect;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "ii:GtkSheet.get_cell_area", kwlist, &row, &column))
        return NULL;

    ret = gtk_sheet_get_cell_area (GTK_SHEET(self->obj), row, column, &rect);
    if (ret)
        return pyg_boxed_new(GDK_TYPE_RECTANGLE, &rect, TRUE, TRUE);
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override gtk_sheet_get_attributes kwargs
static PyObject *
_wrap_gtk_sheet_get_attributes (PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "row", "column", NULL };
    gint row, column;
    gboolean ret;
    GtkSheetCellAttr *attr = g_new(GtkSheetCellAttr, 1);
    PyObject *newattr;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "ii:GtkSheet.get_attributes", kwlist, &row, &column))
        return NULL;

    /* This function always initiates the attr object except if row <= 0 or 
       column <= 0
     */
    ret = gtk_sheet_get_attributes (GTK_SHEET(self->obj), row, column, attr);
    if (ret || (!ret && row >= 0 && column >= 0))
    {
        newattr = pyg_boxed_new(GTK_TYPE_SHEET_CELL_ATTR, attr, TRUE, TRUE);
        g_free(attr);
        return newattr;

    }
    g_free(attr);
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override gtk_sheet_cell_get_text
static PyObject *
_wrap_gtk_sheet_cell_get_text(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    /* The default wrapper would free the string returned by 
       gtk_sheet_cell_get_text but it shouldn't */

    static char *kwlist[] = { "row", "col", NULL };
    int row, col;
    gchar *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ii:GtkSheet.cell_get_text", kwlist, &row, &col))
        return NULL;
    
    ret = gtk_sheet_cell_get_text(GTK_SHEET(self->obj), row, col);
    
    if (ret) {
        PyObject *py_ret = PyString_FromString(ret);        
        /*g_free(ret);*/
        return py_ret;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override gtk_sheet_get_child_at
static PyObject *
_wrap_gtk_sheet_get_child_at(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "row", "col", NULL };
    int row, col;
    GtkSheetChild *child;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ii:GtkSheet.cell_get_text", kwlist, &row, &col))
        return NULL;

    child = gtk_sheet_get_child_at(GTK_SHEET(self->obj), row, col);
    if (child)
        return pygobject_new((GObject *)child->widget);

    Py_INCREF(Py_None);
    return Py_None;
}
%%
ignore
  gtk_sheet_new_browser  
  gtk_sheet_construct_browser
  gtk_sheet_new_with_custom_entry
  gtk_sheet_construct_with_custom_entry
  gtk_sheet_construct
%%
ignore-glob
  *_get_type



