/* 
 * pygtksheet - Python bindings for GtkSheet.
 * Copyright (C) 2009 Victor M. Hernandez-Rocamora
 *
 *   gtksheetrange.override: gtksheet.SheetRange overrides
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301
 * USA
 */
%%
override gtk_sheet_range_new kwargs
static int
_wrap_gtk_sheet_range_new(PyGBoxed *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "row0", "col0", "rowi", "coli", NULL };
    GtkSheetRange rng = {0, 0, 0, 0};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
				     "|iiii:GtkSheetRange.__init__",
				     kwlist, &(rng.row0), &(rng.col0),
				     &(rng.rowi), &(rng.coli)))
	    return -1;

    self->boxed =  g_boxed_copy(GTK_TYPE_SHEET_RANGE, &rng);
    self->free_on_dealloc = TRUE;
    self->gtype = GTK_TYPE_SHEET_RANGE;
    
    return 0;
}
%%
override-slot GtkSheetRange.tp_as_sequence
static Py_ssize_t
_wrap_gtk_sheet_range_length(PyGBoxed *self)
{
    return 4;
}
static PyObject *
_wrap_gtk_sheet_range_getitem(PyGBoxed *self, Py_ssize_t pos)
{
    GtkSheetRange *rect;

    if (pos < 0) pos += 4;
    if (pos < 0 || pos >= 4) {
        PyErr_SetString(PyExc_IndexError, "index out of range");
        return NULL;
    }
    rect = pyg_boxed_get(self, GtkSheetRange);
    switch (pos) {
        case 0: return PyInt_FromLong(rect->row0);
        case 1: return PyInt_FromLong(rect->col0);
        case 2: return PyInt_FromLong(rect->rowi);
        case 3: return PyInt_FromLong(rect->coli);
        default:
            g_assert_not_reached();
            return NULL;
    }
}
static int
_wrap_gtk_sheet_range_setitem(PyGBoxed *self, Py_ssize_t pos, PyObject *value)
{
    GtkSheetRange *rect;
    gint val;

    if (pos < 0) pos += 4;
    if (pos < 0 || pos >= 4) {
        PyErr_SetString(PyExc_IndexError, "index out of range");
        return -1;
    }
    rect = pyg_boxed_get(self, GtkSheetRange);
    val = PyInt_AsLong(value);
    if (PyErr_Occurred())
        return -1;
    switch(pos) {
        case 0: rect->row0 = val; break;
        case 1: rect->col0 = val; break;
        case 2: rect->rowi = val; break;
        case 3: rect->coli = val; break;
        default:
            g_assert_not_reached();
            return -1;
    }
    return 0;
}
static PySequenceMethods _wrap_gtk_sheet_range_tp_as_sequence = {
    (lenfunc)_wrap_gtk_sheet_range_length,
    0,
    0,
    (ssizeargfunc)_wrap_gtk_sheet_range_getitem,
    0,
    (ssizeobjargproc)_wrap_gtk_sheet_range_setitem,
    0,
};
%%
override-attr GtkSheetRange.row0
static int
_wrap_gtk_sheet_range__set_row0(PyGBoxed *self, PyObject *value, void *closure)
{
    gint val;

    val = PyInt_AsLong(value);
    if (PyErr_Occurred())
        return -1;
    pyg_boxed_get(self, GtkSheetRange)->row0 = val;
    return 0;
}
%%
override-attr GtkSheetRange.col0
static int
_wrap_gtk_sheet_range__set_col0(PyGBoxed *self, PyObject *value, void *closure)
{
    gint val;

    val = PyInt_AsLong(value);
    if (PyErr_Occurred())
        return -1;
    pyg_boxed_get(self, GtkSheetRange)->col0 = val;
    return 0;
}
%%
override-attr GtkSheetRange.rowi
static int
_wrap_gtk_sheet_range__set_rowi(PyGBoxed *self, PyObject *value, void *closure)
{
    gint val;

    val = PyInt_AsLong(value);
    if (PyErr_Occurred())
        return -1;
    pyg_boxed_get(self, GtkSheetRange)->rowi = val;
    return 0;
}
%%
override-attr GtkSheetRange.coli
static int
_wrap_gtk_sheet_range__set_coli(PyGBoxed *self, PyObject *value, void *closure)
{
    gint val;

    val = PyInt_AsLong(value);
    if (PyErr_Occurred())
        return -1;
    pyg_boxed_get(self, GtkSheetRange)->coli = val;
    return 0;
}
%%
override-slot GtkSheetRange.tp_richcompare
static PyObject *
_wrap_gtk_sheet_range_tp_richcompare(PyObject *self, PyObject *other, int op)
{
    PyObject *result;

    if (PyObject_TypeCheck(self, &PyGtkSheetRange_Type)
        && PyObject_TypeCheck(other, &PyGtkSheetRange_Type)) {
        GtkSheetRange *rect1 = pyg_boxed_get(self, GtkSheetRange);
        GtkSheetRange *rect2 = pyg_boxed_get(other, GtkSheetRange);

        switch (op) {
        case Py_EQ:
            result = (rect1->col0 == rect2->col0 && rect1->row0 == rect2->row0
                      && rect1->coli == rect2->coli && rect1->rowi == rect2->rowi
                      ? Py_True : Py_False);
            break;
        case Py_NE:
            result = (rect1->col0 != rect2->col0 || rect1->row0 != rect2->row0
                      || rect1->coli != rect2->coli || rect1->rowi != rect2->rowi
                      ? Py_True : Py_False);
            break;
        default:
            result = Py_NotImplemented;
        }
    }
    else
        result = Py_NotImplemented;

    Py_INCREF(result);
    return result;
}
%%
override-slot GtkSheetRange.tp_repr
static PyObject *
_wrap_gtk_sheet_range_tp_repr(PyGBoxed *self)
{
    GtkSheetRange *rect = pyg_boxed_get(self, GtkSheetRange);
    return PyString_FromFormat("%s(%d, %d, %d, %d)", self->ob_type->tp_name,
                               rect->row0, rect->col0, rect->rowi, rect->coli);
}
